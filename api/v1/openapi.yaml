openapi: 3.1.1
info:
  title: Shumilog API
  description: |
    個人コンテンツログの記録と共有のためのAPI
    
    **正規ソース**: これはAPI仕様書の信頼できる情報源です。
    すべての開発、テスト、文書化はこのファイルを参照してください。
    
    機能開発に伴い、この仕様書を継続的に保守してください。
  version: 0.1.0
servers:
  - url: https://api.shumilog.dev/api
    description: 本番サーバー
  - url: http://localhost:8787/api
    description: 開発サーバー

paths:
  /auth/twitter:
    get:
      summary: Twitter OAuthフローの開始
      description: ユーザーをTwitter認証にリダイレクトします
      responses:
        '302':
          description: Twitter OAuthへリダイレクト
          headers:
            Location:
              schema:
                type: string
                example: https://twitter.com/i/oauth2/authorize?...
        '400':
          description: 無効なリクエストパラメータ

  /auth/callback:
    get:
      summary: Twitter OAuthコールバックの処理
      description: OAuthコールバックを処理し、ユーザーセッションを作成します
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: セッション付きでアプリケーションへリダイレクト
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session=token; HttpOnly; Secure
        '401':
          description: 認証に失敗しました

  /auth/logout:
    post:
      summary: ユーザーログアウト
      description: ユーザーセッションを無効化します
      security:
        - sessionAuth: []
      responses:
        '200':
          description: 正常にログアウトしました
        '401':
          description: 認証されていません

  /users/me:
    get:
      summary: 現在のユーザー情報を取得
      security:
        - sessionAuth: []
      responses:
        '200':
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 認証されていません

  /users/me/logs:
    get:
      summary: 現在のユーザーのログを取得（公開・非公開両方）
      description: 認証されたユーザーに属するすべてのログを返します
      security:
        - sessionAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: ユーザーのログ一覧
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - limit
                  - offset
                  - has_more
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  has_more:
                    type: boolean
        '401':
          description: 認証されていません

  /users/me/stats:
    get:
      summary: 現在のユーザーの統計情報を取得
      description: ログ数やタグ使用状況を含むユーザーの活動に関する包括的な統計情報を返します
      security:
        - sessionAuth: []
      responses:
        '200':
          description: ユーザー統計情報
          content:
            application/json:
              schema:
                type: object
                required:
                  - logs
                  - tags
                properties:
                  logs:
                    type: object
                    required:
                      - total
                      - public
                      - recent
                    properties:
                      total:
                        type: integer
                        description: ログの総数
                      public:
                        type: integer
                        description: 公開ログの数
                      recent:
                        type: integer
                        description: 過去7日間に作成されたログの数
                  tags:
                    type: object
                    required:
                      - total
                      - top_tags
                      - recent_tags
                    properties:
                      total:
                        type: integer
                        description: 使用されたユニークなタグの総数
                      top_tags:
                        type: array
                        description: 最も頻繁に使用されたタグ
                        items:
                          type: object
                          required:
                            - id
                            - name
                            - count
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                            description:
                              type: string
                              nullable: true
                            count:
                              type: integer
                              description: このタグが使用された回数
                      recent_tags:
                        type: array
                        description: 最近使用されたタグ（過去7日間）
                        items:
                          type: object
                          required:
                            - id
                            - name
                            - lastUsed
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                            description:
                              type: string
                              nullable: true
                            lastUsed:
                              type: string
                              format: date-time
        '401':
          description: 認証されていません

  /tags:
    get:
      summary: タグの検索と一覧表示
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: タグの一覧
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - limit
                  - offset
                  - has_more
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  has_more:
                    type: boolean

    post:
      summary: 新しいタグを作成
      description: |
        自動ハッシュタグ処理で新しいタグを作成します。
        
        **ハッシュタグ処理**: 説明にハッシュタグパターン（`#{tagName}` または `#tagName`）が含まれている場合、
        システムは自動的に既存のタグとの関連付けを作成するか、存在しない場合は新しいタグを作成します。
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: タグが作成されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: 無効なタグデータ
        '401':
          description: 認証されていません

  /tags/{tagId}:
    get:
      summary: タグ詳細を取得
      description: |
        タグの詳細情報を取得します。`tagId` パラメータは以下の両方を受け付けます：
        - タグ名（ユーザーフレンドリー、必要に応じてURLエンコード）
        - タグID（後方互換性のため）
        
        まずタグ名がチェックされ、見つからない場合はタグIDがチェックされます。
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
          description: タグ名（推奨）またはタグID
          example: "Anime"
      responses:
        '200':
          description: タグ詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDetail'
        '404':
          description: タグが見つかりません

    put:
      summary: タグを更新
      description: |
        自動ハッシュタグ処理で既存のタグを更新します。
        `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
        
        **ハッシュタグ処理**: 説明にハッシュタグパターン（`#{tagName}` または `#tagName`）が含まれている場合、
        システムは自動的に既存のタグとの関連付けを作成するか、存在しない場合は新しいタグを作成します。
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
          description: タグ名（推奨）またはタグID
          example: "Anime"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdate'
      responses:
        '200':
          description: タグが更新されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: 認証されていません
        '403':
          description: タグ所有者ではありません
        '404':
          description: タグが見つかりません

    delete:
      summary: タグを削除
      description: |
        タグを削除します。`tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
        
        **管理者権限が必要です**: 'admin' ロールを持つユーザーのみがタグを削除できます。
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
          description: タグ名（推奨）またはタグID
          example: "Anime"
      responses:
        '204':
          description: タグが削除されました
        '401':
          description: 認証されていません
        '403':
          description: 管理者権限が必要です
        '404':
          description: タグが見つかりません

  /tags/{tagId}/associations:
    get:
      summary: このタグに関連付けられたタグを取得
      description: |
        指定されたタグに関連付けられたすべてのタグを取得します。
        `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
          description: タグ名（推奨）またはタグID
          example: "Anime"
      responses:
        '200':
          description: 関連付けられたタグの一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '404':
          description: タグが見つかりません

    post:
      summary: タグ間の関連付けを作成
      description: |
        2つのタグ間の関連付けを作成します。
        `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
          description: タグ名（推奨）またはタグID
          example: "Anime"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - associated_tag_id
              properties:
                associated_tag_id:
                  type: string
                  description: 関連付けるタグのID
      responses:
        '201':
          description: タグ関連付けが作成されました
        '400':
          description: 無効な関連付けデータ
        '401':
          description: 認証されていません
        '404':
          description: タグが見つかりません

    delete:
      summary: タグ間の関連付けを削除
      description: |
        2つのタグ間の関連付けを削除します。
        `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
          description: タグ名（推奨）またはタグID
          example: "Anime"
        - name: associated_tag_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: タグ関連付けが削除されました
        '401':
          description: 認証されていません
        '404':
          description: タグまたは関連付けが見つかりません

  /support/tags:
    post:
      summary: タグ編集用のコンテンツサポートを取得
      description: |
        タグ名とサポートタイプに基づいて、タグのサポートコンテンツを取得します。
        コンテンツは関連するハッシュタグ付きのMarkdown形式で返されます。
        
        このエンドポイントは、新しいタグを作成したり既存のタグを編集したりする際に使用できます。
        既存のタグIDを必要とせず、タグ名のみで使用可能です。
        
        現在サポートされているタイプ:
        - `ai_enhanced`: Wikipediaデータを基にAIで拡張コンテンツを生成
        - `wikipedia_summary`: Wikipediaから直接概要を取得
        
        レスポンスには、関連する用語がハッシュタグに変換されたMarkdown形式のコンテンツが含まれます。
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tag_name
                - support_type
              properties:
                tag_name:
                  type: string
                  description: サポートを取得するタグの名前
                  example: アニメ
                support_type:
                  type: string
                  enum: [wikipedia_summary, ai_enhanced]
                  description: |
                    取得するサポートコンテンツのタイプ:
                    - `ai_enhanced`: AI生成コンテンツ
                    - `wikipedia_summary`: Wikipediaの直接概要
                  example: ai_enhanced
      responses:
        '200':
          description: サポートコンテンツが正常に取得されました
          content:
            application/json:
              schema:
                type: object
                required:
                  - content
                  - support_type
                properties:
                  content:
                    type: string
                    description: ハッシュタグ付きのMarkdown形式コンテンツ
                    example: "アニメ（#anime）は日本の文化を代表するメディアです。#manga や #gaming とともに広く親しまれています。"
                  support_type:
                    type: string
                    description: 使用されたサポートのタイプ
                    enum: [wikipedia_summary, ai_enhanced]
                    example: ai_enhanced
        '400':
          description: 無効なサポートタイプまたはリクエスト
        '401':
          description: 認証されていません
        '404':
          description: 指定されたタグ名で利用可能なコンテンツがありません
        '500':
          description: 外部サービスエラーまたはサーバーエラー

  /logs:
    get:
      summary: 公開ログの一覧表示
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: タイトルまたはコンテンツでログを検索（大文字小文字を区別しない部分一致）
        - name: tag_ids
          in: query
          schema:
            type: array
            items:
              type: string
            description: 関連付けられたタグIDでフィルタリング
        - name: user_id
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: 公開ログの一覧
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - limit
                  - offset
                  - has_more
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
                  has_more:
                    type: boolean

    post:
      summary: 新しいログを作成
      description: |
        新しいログエントリを作成します。コンテンツ内のハッシュタグ（#{tagName} または #tagName 形式）
        は自動的に抽出され、ログにタグとして関連付けられます。
        明示的なタグ指定と自動ハッシュタグ抽出の両方をサポートします。
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogCreate'
      responses:
        '201':
          description: ログが作成されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: 無効なログデータ
        '401':
          description: 認証されていません

  /logs/{logId}:
    get:
      summary: ログ詳細を取得
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ログ詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogDetail'
        '404':
          description: ログが見つかりません

    put:
      summary: ログを更新
      description: |
        既存のログエントリを更新します。content_mdが更新される場合、コンテンツ内のハッシュタグ
        （#{tagName} または #tagName 形式）は自動的に抽出され、ログにタグとして関連付けられます。
      security:
        - sessionAuth: []
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogUpdate'
      responses:
        '200':
          description: ログが更新されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: 認証されていません
        '403':
          description: ログ所有者ではありません
        '404':
          description: ログが見つかりません

    delete:
      summary: ログを削除
      security:
        - sessionAuth: []
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ログが削除されました
        '401':
          description: 認証されていません
        '403':
          description: ログ所有者ではありません
        '404':
          description: ログが見つかりません

  /logs/{logId}/related:
    get:
      summary: 関連ログを取得
      description: |
        指定されたログに関連するログを取得します。
        関連性は共有タグによって決定されます - 共通のタグが多いログほど上位にランク付けされます。
        指定されたログ自体を除く公開ログのみが返されます。
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 20
      responses:
        '200':
          description: 関連ログの一覧
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  total:
                    type: integer
        '404':
          description: ログが見つかりません

  /logs/{logId}/images:
    post:
      summary: ログに画像をアップロード
      description: 画像ファイルをアップロードし、ログに添付します
      security:
        - sessionAuth: []
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: 画像ファイル（JPEG、PNG、GIF、WebP）。最大サイズ10MB。
                width:
                  type: integer
                  description: 画像の幅（ピクセル単位）
                height:
                  type: integer
                  description: 画像の高さ（ピクセル単位）
                display_order:
                  type: integer
                  description: 画像の表示順序（小さい数字が先頭に表示されます）
                  default: 0
      responses:
        '201':
          description: 画像が正常にアップロードされました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogImage'
        '400':
          description: 無効なリクエスト（ファイルなし、形式が間違っている、ファイルが大きすぎる）
        '401':
          description: 認証されていません
        '403':
          description: ログ所有者ではありません
        '404':
          description: ログが見つかりません

    get:
      summary: ログのすべての画像を取得
      description: ログに添付されたすべての画像を取得します
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 画像の一覧
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogImage'
        '404':
          description: ログが見つかりません

  /logs/{logId}/images/{imageId}:
    get:
      summary: 画像データを取得
      description: 実際の画像ファイルを取得します
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
        - name: imageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 画像ファイル
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
        '404':
          description: 画像が見つかりません

    delete:
      summary: 画像を削除
      description: ログに添付された画像を削除します
      security:
        - sessionAuth: []
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
        - name: imageId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 画像が正常に削除されました
        '401':
          description: 認証されていません
        '403':
          description: ログ所有者ではありません
        '404':
          description: 画像が見つかりません

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session

  schemas:
    User:
      type: object
      additionalProperties: false
      required:
        - id
        - twitter_username
        - display_name
        - avatar_url
        - role
        - created_at
      properties:
        id:
          type: string
        twitter_username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
          nullable: true
          description: ユーザーのアバターURL。アバターが設定されていない場合はnull。
        role:
          type: string
          enum: [user, admin]
          description: 権限管理のためのユーザーロール。'admin'ユーザーは任意のタグを削除できます。
          default: user
        created_at:
          type: string
          format: date-time

    Tag:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - description
        - metadata
        - created_by
        - created_at
        - updated_at
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
          description: タグのオプションの説明。ユーザーが提供しない場合はnull。
        metadata:
          type: object
          description: 柔軟なメタデータストレージ
        created_by:
          type: string
          description: このタグを作成したユーザーID
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TagCreate:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 200
        description:
          type: string
          description: |
            タグのオプションの説明。2つの形式のハッシュタグパターンをサポート:
            - #{tagName} - 拡張形式（スペースと特殊文字をサポート）
            - #tagName - シンプル形式（英数字、日本語文字、アンダースコア、ハイフン）
            
            ハッシュタグパターンが検出されると、システムは自動的に:
            1. 一致する名前を持つ既存のタグを検索
            2. 存在しない場合は新しいタグを作成（空の説明とメタデータ付き）
            3. このタグと参照されたタグ間の関連付けを作成
        metadata:
          type: object

    TagUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          maxLength: 200
        description:
          type: string
          description: |
            タグのオプションの説明。2つの形式のハッシュタグパターンをサポート:
            - #{tagName} - 拡張形式（スペースと特殊文字をサポート）
            - #tagName - シンプル形式（英数字、日本語文字、アンダースコア、ハイフン）
            
            ハッシュタグパターンが検出されると、システムは自動的に:
            1. 一致する名前を持つ既存のタグを検索
            2. 存在しない場合は新しいタグを作成（空の説明とメタデータ付き）
            3. このタグと参照されたタグ間の関連付けを作成
        metadata:
          type: object

    TagDetail:
      allOf:
        - $ref: '#/components/schemas/Tag'
        - type: object
          required:
            - log_count
            - recent_logs
            - associated_tags
            - recent_referring_tags
          properties:
            log_count:
              type: integer
            recent_logs:
              type: array
              items:
                $ref: '#/components/schemas/Log'
            associated_tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              description: このタグに関連付けられたタグ
            recent_referring_tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              description: このタグを参照している他のタグ（被参照タグ）

    Log:
      type: object
      additionalProperties: false
      required:
        - id
        - user
        - associated_tags
        - title
        - content_md
        - is_public
        - images
        - created_at
        - updated_at
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        associated_tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: このログに関連付けられたタグ
        title:
          type: string
          nullable: true
          description: ログのオプションのタイトル。ユーザーが提供しない場合はnull。
        content_md:
          type: string
          description: Markdown形式のコンテンツ
        is_public:
          type: boolean
          description: このログが公開されているかどうか
        images:
          type: array
          items:
            $ref: '#/components/schemas/LogImage'
          description: このログに添付された画像
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LogCreate:
      type: object
      additionalProperties: false
      required:
        - content_md
      properties:
        tag_ids:
          type: array
          items:
            type: string
          description: このログに関連付ける既存のタグのID
        tag_names:
          type: array
          items:
            type: string
          description: このログに関連付けるタグの名前（存在しない場合は新しいタグを作成します）
        title:
          type: string
          maxLength: 200
        content_md:
          type: string
          maxLength: 10000
          description: |
            ログのMarkdownコンテンツ。#{tagName} または #tagName 形式のハッシュタグは
            自動的に抽出され、ログにタグとして関連付けられます。
        is_public:
          type: boolean
          default: true
          description: ログが公開されているかどうか。指定されていない場合はデフォルトでtrue（公開）になります。

    LogUpdate:
      type: object
      additionalProperties: false
      properties:
        tag_ids:
          type: array
          items:
            type: string
          description: 既存のタグIDを使用してこのログに関連付けられたタグを更新します
        tag_names:
          type: array
          items:
            type: string
          description: タグ名を使用してこのログに関連付けられたタグを更新します（存在しない場合は新しいタグを作成します）
        title:
          type: string
          maxLength: 200
        content_md:
          type: string
          maxLength: 10000
          description: |
            ログのMarkdownコンテンツ。コンテンツが更新される場合、#{tagName} または #tagName 形式のハッシュタグは
            自動的に抽出され、ログにタグとして関連付けられます。
        is_public:
          type: boolean

    LogDetail:
      allOf:
        - $ref: '#/components/schemas/Log'
        - type: object
          description: 詳細なログ情報（Logスキーマと同じ）

    LogImage:
      type: object
      additionalProperties: false
      required:
        - id
        - log_id
        - r2_key
        - file_name
        - content_type
        - file_size
        - width
        - height
        - display_order
        - created_at
      properties:
        id:
          type: string
          description: ユニークな画像識別子
        log_id:
          type: string
          description: この画像が添付されているログのID
        r2_key:
          type: string
          description: 画像のR2ストレージキー
        file_name:
          type: string
          description: 元のファイル名
        content_type:
          type: string
          description: 画像のMIMEタイプ
          example: image/jpeg
        file_size:
          type: integer
          description: ファイルサイズ（バイト単位）
        width:
          type: integer
          nullable: true
          description: 画像の幅（ピクセル単位）。寸法情報が利用できない場合はnull。
        height:
          type: integer
          nullable: true
          description: 画像の高さ（ピクセル単位）。寸法情報が利用できない場合はnull。
        display_order:
          type: integer
          description: 表示順序（小さい数字が先頭に表示されます）
        created_at:
          type: string
          format: date-time
          description: 画像がアップロードされた日時
