openapi: 3.0.3
info:
  title: Hobby Content Log API
  description: |
    API for logging and sharing personal content logs
    
    **CANONICAL SOURCE**: This is the source of truth for the API specification.
    All development, testing, and documentation should reference this file.
    
    Maintain this specification continuously as features are developed.
  version: 1.0.0
servers:
  - url: https://shumilog.example.com/api
    description: Production server
  - url: http://localhost:8787/api
    description: Development server

paths:
  /auth/twitter:
    get:
      summary: Initiate Twitter OAuth flow
      description: Redirects user to Twitter for authentication
      responses:
        '302':
          description: Redirect to Twitter OAuth
          headers:
            Location:
              schema:
                type: string
                example: https://twitter.com/i/oauth2/authorize?...
        '400':
          description: Invalid request parameters

  /auth/callback:
    get:
      summary: Handle Twitter OAuth callback
      description: Process OAuth callback and create user session
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '302':
          description: Redirect to application with session
          headers:
            Set-Cookie:
              schema:
                type: string
                example: session=token; HttpOnly; Secure
        '401':
          description: Authentication failed

  /auth/logout:
    post:
      summary: Logout user
      description: Invalidate user session
      security:
        - sessionAuth: []
      responses:
        '200':
          description: Successfully logged out
        '401':
          description: Not authenticated

  /users/me:
    get:
      summary: Get current user profile
      security:
        - sessionAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated

  /tags:
    get:
      summary: Search and list tags
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

    post:
      summary: Create new tag
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: Tag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid tag data
        '401':
          description: Not authenticated

  /tags/{tagId}:
    get:
      summary: Get tag details
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tag details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDetail'
        '404':
          description: Tag not found

    put:
      summary: Update tag
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdate'
      responses:
        '200':
          description: Tag updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Not authenticated
        '403':
          description: Not tag owner
        '404':
          description: Tag not found

    delete:
      summary: Delete tag
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Tag deleted
        '401':
          description: Not authenticated
        '403':
          description: Not tag owner
        '404':
          description: Tag not found

  /tags/{tagId}/associations:
    get:
      summary: Get tags associated with this tag
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of associated tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '404':
          description: Tag not found

    post:
      summary: Create association between tags
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - associated_tag_id
              properties:
                associated_tag_id:
                  type: string
                  description: ID of tag to associate with
      responses:
        '201':
          description: Tag association created
        '400':
          description: Invalid association data
        '401':
          description: Not authenticated
        '404':
          description: Tag not found

    delete:
      summary: Remove association between tags
      security:
        - sessionAuth: []
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
        - name: associated_tag_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Tag association removed
        '401':
          description: Not authenticated
        '404':
          description: Tag or association not found

  /logs:
    get:
      summary: List public logs
      parameters:
        - name: tag_ids
          in: query
          schema:
            type: array
            items:
              type: string
            description: Filter by associated tag IDs
        - name: user_id
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of public logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  total:
                    type: integer

    post:
      summary: Create new log
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogCreate'
      responses:
        '201':
          description: Log created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: Invalid log data
        '401':
          description: Not authenticated

  /logs/{logId}:
    get:
      summary: Get log details
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Log details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogDetail'
        '404':
          description: Log not found

    put:
      summary: Update log
      security:
        - sessionAuth: []
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogUpdate'
      responses:
        '200':
          description: Log updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: Not authenticated
        '403':
          description: Not log owner
        '404':
          description: Log not found

    delete:
      summary: Delete log
      security:
        - sessionAuth: []
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Log deleted
        '401':
          description: Not authenticated
        '403':
          description: Not log owner
        '404':
          description: Log not found

  /logs/{logId}/share:
    post:
      summary: Share log to Twitter
      security:
        - sessionAuth: []
      parameters:
        - name: logId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully shared to Twitter
          content:
            application/json:
              schema:
                type: object
                properties:
                  twitter_post_id:
                    type: string
        '401':
          description: Not authenticated
        '403':
          description: Not log owner
        '404':
          description: Log not found

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        twitter_username:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
        created_at:
          type: string
          format: date-time

    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        metadata:
          type: object
          description: Flexible metadata storage
        created_by:
          type: string
          description: User ID who created this tag
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TagCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 200
        description:
          type: string
        metadata:
          type: object

    TagUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        description:
          type: string
        metadata:
          type: object

    TagDetail:
      allOf:
        - $ref: '#/components/schemas/Tag'
        - type: object
          properties:
            log_count:
              type: integer
            recent_logs:
              type: array
              items:
                $ref: '#/components/schemas/Log'
            associated_tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
              description: Tags associated with this tag

    Log:
      type: object
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        associated_tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Tags associated with this log
        title:
          type: string
        content_md:
          type: string
          description: Content in Markdown format
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LogCreate:
      type: object
      required:
        - tag_ids
        - content_md
      properties:
        tag_ids:
          type: array
          items:
            type: string
          description: IDs of tags to associate with this log
          minItems: 1
        title:
          type: string
          maxLength: 200
        content_md:
          type: string
          maxLength: 10000
        is_public:
          type: boolean
          default: false

    LogUpdate:
      type: object
      properties:
        tag_ids:
          type: array
          items:
            type: string
          description: Update the tags associated with this log
        title:
          type: string
          maxLength: 200
        content_md:
          type: string
          maxLength: 10000
        is_public:
          type: boolean

    LogDetail:
      allOf:
        - $ref: '#/components/schemas/Log'
        - type: object
          properties:
            is_public:
              type: boolean
              description: Whether this log is publicly visible