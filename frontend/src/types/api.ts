/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/twitter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Twitter OAuthフローの開始
         * @description ユーザーをTwitter認証にリダイレクトします
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to Twitter OAuth */
                302: {
                    headers: {
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Twitter OAuthコールバックの処理
         * @description OAuthコールバックを処理し、ユーザーセッションを作成します
         */
        get: {
            parameters: {
                query: {
                    code: string;
                    state: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to application with session */
                302: {
                    headers: {
                        "Set-Cookie"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication failed */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * ユーザーログアウト
         * @description ユーザーセッションを無効化します
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully logged out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 現在のユーザー情報を取得 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ユーザー情報 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 現在のユーザーのログを取得（公開・非公開両方）
         * @description 認証されたユーザーに属するすべてのログを返します
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of user's logs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items: components["schemas"]["Log"][];
                            total: number;
                            limit: number;
                            offset: number;
                            has_more: boolean;
                        };
                    };
                };
                /** @description Not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 現在のユーザーの統計情報を取得
         * @description ログ数やタグ使用状況を含むユーザーの活動に関する包括的な統計情報を返します
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ユーザー統計情報 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            logs: {
                                /** @description ログの総数 */
                                total: number;
                                /** @description 公開ログの数 */
                                public: number;
                                /** @description 過去7日間に作成されたログの数 */
                                recent: number;
                            };
                            tags: {
                                /** @description 使用されたユニークなタグの総数 */
                                total: number;
                                /** @description 最も頻繁に使用されたタグ */
                                top_tags: {
                                    /** Format: uuid */
                                    id: string;
                                    name: string;
                                    description?: string | null;
                                    /** @description このタグが使用された回数 */
                                    count: number;
                                }[];
                                /** @description 最近使用されたタグ（過去7日間） */
                                recent_tags: {
                                    /** Format: uuid */
                                    id: string;
                                    name: string;
                                    description?: string | null;
                                    /** Format: date-time */
                                    lastUsed: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Not authenticated */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** タグの検索と一覧表示 */
        get: {
            parameters: {
                query?: {
                    search?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description タグの一覧 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items: components["schemas"]["Tag"][];
                            total: number;
                            limit: number;
                            offset: number;
                            has_more: boolean;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * 新しいタグを作成
         * @description 自動ハッシュタグ処理で新しいタグを作成します。
         *
         *     **ハッシュタグ処理**: 説明にハッシュタグパターン（`#{tagName}` または `#tagName`）が含まれている場合、
         *     システムは自動的に既存のタグとの関連付けを作成するか、存在しない場合は新しいタグを作成します。
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TagCreate"];
                };
            };
            responses: {
                /** @description タグが作成されました */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"];
                    };
                };
                /** @description 無効なタグデータ */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * タグ詳細を取得
         * @description タグの詳細情報を取得します。`tagId` パラメータは以下の両方を受け付けます：
         *     - タグ名（ユーザーフレンドリー、必要に応じてURLエンコード）
         *     - タグID（後方互換性のため）
         *
         *     まずタグ名がチェックされ、見つからない場合はタグIDがチェックされます。
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description タグ名（推奨）またはタグID
                     * @example Anime
                     */
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description タグ詳細 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TagDetail"];
                    };
                };
                /** @description タグが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * タグを更新
         * @description 自動ハッシュタグ処理で既存のタグを更新します。
         *     `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
         *
         *     **ハッシュタグ処理**: 説明にハッシュタグパターン（`#{tagName}` または `#tagName`）が含まれている場合、
         *     システムは自動的に既存のタグとの関連付けを作成するか、存在しない場合は新しいタグを作成します。
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description タグ名（推奨）またはタグID
                     * @example Anime
                     */
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TagUpdate"];
                };
            };
            responses: {
                /** @description タグが更新されました */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"];
                    };
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description タグ所有者ではありません */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description タグが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * タグを削除
         * @description タグを削除します。`tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
         *
         *     **管理者権限が必要です**: 'admin' ロールを持つユーザーのみがタグを削除できます。
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description タグ名（推奨）またはタグID
                     * @example Anime
                     */
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description タグが削除されました */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 管理者権限が必要です */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description タグが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{tagId}/associations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * このタグに関連付けられたタグを取得
         * @description 指定されたタグに関連付けられたすべてのタグを取得します。
         *     `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description タグ名（推奨）またはタグID
                     * @example Anime
                     */
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 関連付けられたタグの一覧 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"][];
                    };
                };
                /** @description タグが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * タグ間の関連付けを作成
         * @description 2つのタグ間の関連付けを作成します。
         *     `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description タグ名（推奨）またはタグID
                     * @example Anime
                     */
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description 関連付けるタグのID */
                        associated_tag_id: string;
                    };
                };
            };
            responses: {
                /** @description タグ関連付けが作成されました */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 無効な関連付けデータ */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description タグが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * タグ間の関連付けを削除
         * @description 2つのタグ間の関連付けを削除します。
         *     `tagId` パラメータはタグ名（推奨）とタグIDの両方を受け付けます。
         *
         */
        delete: {
            parameters: {
                query: {
                    associated_tag_id: string;
                };
                header?: never;
                path: {
                    /**
                     * @description タグ名（推奨）またはタグID
                     * @example Anime
                     */
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description タグ関連付けが削除されました */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description タグまたは関連付けが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * タグ編集用のコンテンツサポートを取得
         * @description タグ名とサポートタイプに基づいて、タグのサポートコンテンツを取得します。
         *     コンテンツは関連するハッシュタグ付きのMarkdown形式で返されます。
         *
         *     このエンドポイントは、新しいタグを作成したり既存のタグを編集したりする際に使用できます。
         *     既存のタグIDを必要とせず、タグ名のみで使用可能です。
         *
         *     現在サポートされているタイプ:
         *     - `ai_enhanced`: Wikipediaデータを基にAIで拡張コンテンツを生成
         *     - `wikipedia_summary`: Wikipediaから直接概要を取得
         *
         *     レスポンスには、関連する用語がハッシュタグに変換されたMarkdown形式のコンテンツが含まれます。
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description サポートを取得するタグの名前
                         * @example アニメ
                         */
                        tag_name: string;
                        /**
                         * @description 取得するサポートコンテンツのタイプ:
                         *     - `ai_enhanced`: AI生成コンテンツ
                         *     - `wikipedia_summary`: Wikipediaの直接概要
                         *
                         * @example ai_enhanced
                         * @enum {string}
                         */
                        support_type: "wikipedia_summary" | "ai_enhanced";
                    };
                };
            };
            responses: {
                /** @description サポートコンテンツが正常に取得されました */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * @description ハッシュタグ付きのMarkdown形式コンテンツ
                             * @example アニメ（#anime）は日本の文化を代表するメディアです。#manga や #gaming とともに広く親しまれています。
                             */
                            content: string;
                            /**
                             * @description 使用されたサポートのタイプ
                             * @example ai_enhanced
                             * @enum {string}
                             */
                            support_type: "wikipedia_summary" | "ai_enhanced";
                        };
                    };
                };
                /** @description 無効なサポートタイプまたはリクエスト */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 指定されたタグ名で利用可能なコンテンツがありません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 外部サービスエラーまたはサーバーエラー */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 公開ログの一覧表示 */
        get: {
            parameters: {
                query?: {
                    /** @description タイトルまたはコンテンツでログを検索（大文字小文字を区別しない部分一致） */
                    search?: string;
                    tag_ids?: string[];
                    user_id?: string;
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 公開ログの一覧 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items: components["schemas"]["Log"][];
                            total: number;
                            limit: number;
                            offset: number;
                            has_more: boolean;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * 新しいログを作成
         * @description 新しいログエントリを作成します。コンテンツ内のハッシュタグ（#{tagName} または #tagName 形式）
         *     は自動的に抽出され、ログにタグとして関連付けられます。
         *     明示的なタグ指定と自動ハッシュタグ抽出の両方をサポートします。
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LogCreate"];
                };
            };
            responses: {
                /** @description ログが作成されました */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Log"];
                    };
                };
                /** @description 無効なログデータ */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/{logId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ログ詳細を取得 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ログ詳細 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogDetail"];
                    };
                };
                /** @description ログが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * ログを更新
         * @description 既存のログエントリを更新します。content_mdが更新される場合、コンテンツ内のハッシュタグ
         *     （#{tagName} または #tagName 形式）は自動的に抽出され、ログにタグとして関連付けられます。
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LogUpdate"];
                };
            };
            responses: {
                /** @description ログが更新されました */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Log"];
                    };
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description ログ所有者ではありません */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description ログが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** ログを削除 */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description ログが削除されました */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description ログ所有者ではありません */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description ログが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/{logId}/related": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 関連ログを取得
         * @description 指定されたログに関連するログを取得します。
         *     関連性は共有タグによって決定されます - 共通のタグが多いログほど上位にランク付けされます。
         *     指定されたログ自体を除く公開ログのみが返されます。
         *
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path: {
                    logId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 関連ログの一覧 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items: components["schemas"]["Log"][];
                            total: number;
                        };
                    };
                };
                /** @description ログが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/{logId}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ログのすべての画像を取得
         * @description ログに添付されたすべての画像を取得します
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 画像の一覧 */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items: components["schemas"]["LogImage"][];
                        };
                    };
                };
                /** @description ログが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * ログに画像をアップロード
         * @description 画像ファイルをアップロードし、ログに添付します
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description 画像ファイル（JPEG、PNG、GIF、WebP）。最大サイズ10MB。
                         */
                        file: string;
                        /** @description 画像の幅（ピクセル単位） */
                        width?: number;
                        /** @description 画像の高さ（ピクセル単位） */
                        height?: number;
                        /**
                         * @description 画像の表示順序（小さい数字が先頭に表示されます）
                         * @default 0
                         */
                        display_order?: number;
                    };
                };
            };
            responses: {
                /** @description 画像が正常にアップロードされました */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogImage"];
                    };
                };
                /** @description 無効なリクエスト（ファイルなし、形式が間違っている、ファイルが大きすぎる） */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description ログ所有者ではありません */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description ログが見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/{logId}/images/{imageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 画像データを取得
         * @description 実際の画像ファイルを取得します
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: string;
                    imageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 画像ファイル */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "image/jpeg": string;
                        "image/png": string;
                        "image/gif": string;
                        "image/webp": string;
                    };
                };
                /** @description Image not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * 画像を削除
         * @description ログに添付された画像を削除します
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    logId: string;
                    imageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description 画像が正常に削除されました */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 認証されていません */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description ログ所有者ではありません */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description 画像が見つかりません */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            id: string;
            twitter_username: string;
            display_name: string;
            /** @description ユーザーのアバターURL。アバターが設定されていない場合はnull。 */
            avatar_url: string | null;
            /**
             * @description 権限管理のためのユーザーロール。'admin'ユーザーは任意のタグを削除できます。
             * @default user
             * @enum {string}
             */
            role: "user" | "admin";
            /** Format: date-time */
            created_at: string;
        };
        Tag: {
            id: string;
            name: string;
            /** @description タグのオプションの説明。ユーザーが提供しない場合はnull。 */
            description: string | null;
            /** @description 柔軟なメタデータストレージ */
            metadata: Record<string, never>;
            /** @description このタグを作成したユーザーID */
            created_by: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        TagCreate: {
            name: string;
            /** @description タグのオプションの説明。2つの形式のハッシュタグパターンをサポート:
             *     - #{tagName} - 拡張形式（スペースと特殊文字をサポート）
             *     - #tagName - シンプル形式（英数字、日本語文字、アンダースコア、ハイフン）
             *
             *     ハッシュタグパターンが検出されると、システムは自動的に:
             *     1. 一致する名前を持つ既存のタグを検索
             *     2. 存在しない場合は新しいタグを作成（空の説明とメタデータ付き）
             *     3. このタグと参照されたタグ間の関連付けを作成
             *      */
            description?: string;
            metadata?: Record<string, never>;
        };
        TagUpdate: {
            name?: string;
            /** @description タグのオプションの説明。2つの形式のハッシュタグパターンをサポート:
             *     - #{tagName} - 拡張形式（スペースと特殊文字をサポート）
             *     - #tagName - シンプル形式（英数字、日本語文字、アンダースコア、ハイフン）
             *
             *     ハッシュタグパターンが検出されると、システムは自動的に:
             *     1. 一致する名前を持つ既存のタグを検索
             *     2. 存在しない場合は新しいタグを作成（空の説明とメタデータ付き）
             *     3. このタグと参照されたタグ間の関連付けを作成
             *      */
            description?: string;
            metadata?: Record<string, never>;
        };
        TagDetail: components["schemas"]["Tag"] & {
            log_count: number;
            recent_logs: components["schemas"]["Log"][];
            /** @description このタグに関連付けられたタグ */
            associated_tags: components["schemas"]["Tag"][];
        };
        Log: {
            id: string;
            user: components["schemas"]["User"];
            /** @description このログに関連付けられたタグ */
            associated_tags: components["schemas"]["Tag"][];
            /** @description ログのオプションのタイトル。ユーザーが提供しない場合はnull。 */
            title: string | null;
            /** @description Markdown形式のコンテンツ */
            content_md: string;
            /** @description このログが公開されているかどうか */
            is_public: boolean;
            /** @description このログに添付された画像 */
            images: components["schemas"]["LogImage"][];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        LogCreate: {
            /** @description このログに関連付ける既存のタグのID */
            tag_ids?: string[];
            /** @description このログに関連付けるタグの名前（存在しない場合は新しいタグを作成します） */
            tag_names?: string[];
            title?: string;
            /** @description ログのMarkdownコンテンツ。#{tagName} または #tagName 形式のハッシュタグは
             *     自動的に抽出され、ログにタグとして関連付けられます。
             *      */
            content_md: string;
            /**
             * @description ログが公開されているかどうか。指定されていない場合はデフォルトでtrue（公開）になります。
             * @default true
             */
            is_public: boolean;
        };
        LogUpdate: {
            /** @description 既存のタグIDを使用してこのログに関連付けられたタグを更新します */
            tag_ids?: string[];
            /** @description タグ名を使用してこのログに関連付けられたタグを更新します（存在しない場合は新しいタグを作成します） */
            tag_names?: string[];
            title?: string;
            /** @description ログのMarkdownコンテンツ。コンテンツが更新される場合、#{tagName} または #tagName 形式のハッシュタグは
             *     自動的に抽出され、ログにタグとして関連付けられます。
             *      */
            content_md?: string;
            is_public?: boolean;
        };
        LogDetail: components["schemas"]["Log"] & Record<string, never>;
        LogImage: {
            /** @description ユニークな画像識別子 */
            id: string;
            /** @description この画像が添付されているログのID */
            log_id: string;
            /** @description 画像のR2ストレージキー */
            r2_key: string;
            /** @description 元のファイル名 */
            file_name: string;
            /**
             * @description 画像のMIMEタイプ
             * @example image/jpeg
             */
            content_type: string;
            /** @description ファイルサイズ（バイト単位） */
            file_size: number;
            /** @description 画像の幅（ピクセル単位）。寸法情報が利用できない場合はnull。 */
            width: number | null;
            /** @description 画像の高さ（ピクセル単位）。寸法情報が利用できない場合はnull。 */
            height: number | null;
            /** @description 表示順序（小さい数字が先頭に表示されます） */
            display_order: number;
            /**
             * Format: date-time
             * @description 画像がアップロードされた日時
             */
            created_at: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
